<?php
/*
 * UberAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 08/22/2014
 */

class APIController {
    /**
     * The Products endpoint returns information about the Uber products offered at a given location. The response includes the display name and other details about each product, and lists the products in the proper display order.
     * @param   double $latitude    Required parameter: Latitude component of location.
     * @param   double $longitude    Required parameter: Longitude component of location.
     * @return ProductCollectionModel response from the API call*/
    public function getProducts (
                $latitude,
                $longitude) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/v1/products";

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            "latitude" => $latitude,
            "longitude" => $longitude,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "accept" => "application/json",
            "Authorization", sprintf("Bearer %1$s", Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException("Malformed request.", 400);
        }

        else if ($response->code == 401) {
            throw new APIException("Unauthorized the request requires user authentication (not logged in).", 401);
        }

        else if ($response->code == 403) {
            throw new APIException("Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", 403);
        }

        else if ($response->code == 404) {
            throw new APIException("Not found.", 404);
        }

        else if ($response->code == 406) {
            throw new APIException("Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: “Unacceptable content type. Request resource as: application/json, etc.", 406);
        }

        else if ($response->code == 422) {
            throw new APIException("Invalid request. The request body is parse-able however with invalid content.", 422);
        }

        else if ($response->code == 429) {
            throw new APIException("Too Many Requests. Rate limited.", 429);
        }

        else if ($response->code == 500) {
            throw new APIException("Internal Server Error.", 500);
        }

        else if ($response->code != 200) { //200 = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * The Price Estimates endpoint returns an estimated price range for each product offered at a given location. The price estimate is provided as a formatted string with the full price range and the localized currency symbol.
     * @param   double $startLatitude    Required parameter: Latitude component of start location.
     * @param   double $startLongitude    Required parameter: Longitude component of start location.
     * @param   double $endLatitude    Required parameter: Latitude component of end location.
     * @param   double $endLongitude    Required parameter: Longitude component of end location.
     * @return PriceEstimateCollectionModel response from the API call*/
    public function getPriceEstimates (
                $startLatitude,
                $startLongitude,
                $endLatitude,
                $endLongitude) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/v1/estimates/price";

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            "start_latitude" => $startLatitude,
            "start_longitude" => $startLongitude,
            "end_latitude" => $endLatitude,
            "end_longitude" => $endLongitude,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "accept" => "application/json",
            "Authorization", sprintf("Bearer %1$s", Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException("Malformed request.", 400);
        }

        else if ($response->code == 401) {
            throw new APIException("Unauthorized the request requires user authentication (not logged in).", 401);
        }

        else if ($response->code == 403) {
            throw new APIException("Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", 403);
        }

        else if ($response->code == 404) {
            throw new APIException("Not found.", 404);
        }

        else if ($response->code == 406) {
            throw new APIException("Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: “Unacceptable content type. Request resource as: application/json, etc.", 406);
        }

        else if ($response->code == 422) {
            throw new APIException("Invalid request. The request body is parse-able however with invalid content.", 422);
        }

        else if ($response->code == 429) {
            throw new APIException("Too Many Requests. Rate limited.", 429);
        }

        else if ($response->code == 500) {
            throw new APIException("Internal Server Error.", 500);
        }

        else if ($response->code != 200) { //200 = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * The Time Estimates endpoint returns ETAs for all products offered at a given location, with the responses expressed as integers in seconds. We recommend that this endpoint be called every minute to provide the most accurate, up-to-date ETAs.
     * @param   double $startLatitude    Required parameter: Latitude component of the start location
     * @param   double $startLongitude    Required parameter: Longitude component of the start location
     * @param   string|null $customerUuid    Optional parameter: The customer id interested in estimate
     * @param   string|null $productId    Optional parameter: Id of the requested product
     * @return TimeEstimateCollectionModel response from the API call*/
    public function getTimeEstimates (
                $startLatitude,
                $startLongitude,
                $customerUuid = NULL,
                $productId = NULL) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/v1/estimates/time";

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            "start_latitude" => $startLatitude,
            "start_longitude" => $startLongitude,
            "customer_uuid" => $customerUuid,
            "product_id" => $productId,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "accept" => "application/json",
            "Authorization", sprintf("Bearer %1$s", Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException("Malformed request.", 400);
        }

        else if ($response->code == 401) {
            throw new APIException("Unauthorized the request requires user authentication (not logged in).", 401);
        }

        else if ($response->code == 403) {
            throw new APIException("Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", 403);
        }

        else if ($response->code == 404) {
            throw new APIException("Not found.", 404);
        }

        else if ($response->code == 406) {
            throw new APIException("Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: “Unacceptable content type. Request resource as: application/json, etc.", 406);
        }

        else if ($response->code == 422) {
            throw new APIException("Invalid request. The request body is parse-able however with invalid content.", 422);
        }

        else if ($response->code == 429) {
            throw new APIException("Too Many Requests. Rate limited.", 429);
        }

        else if ($response->code == 500) {
            throw new APIException("Internal Server Error.", 500);
        }

        else if ($response->code != 200) { //200 = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * The User Activity endpoint returns data about a user's lifetime activity with Uber. The response will include pickup locations and times, dropoff locations and times, the distance of past requests, and information about which products were requested.
     * @param   int $offset    Required parameter: Page offset for pagging
     * @param   int $limit    Required parameter: Number of items to return for pagging
     * @return UserActivityModel response from the API call*/
    public function getUserActivity (
                $offset,
                $limit) 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/v1/history";

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($queryBuilder, array (
            "offset" => $offset,
            "limit" => $limit,
        ));

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "accept" => "application/json",
            "Authorization", sprintf("Bearer %1$s", Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException("Malformed request.", 400);
        }

        else if ($response->code == 401) {
            throw new APIException("Unauthorized the request requires user authentication (not logged in).", 401);
        }

        else if ($response->code == 403) {
            throw new APIException("Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", 403);
        }

        else if ($response->code == 404) {
            throw new APIException("Not found.", 404);
        }

        else if ($response->code == 406) {
            throw new APIException("Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: “Unacceptable content type. Request resource as: application/json, etc.", 406);
        }

        else if ($response->code == 422) {
            throw new APIException("Invalid request. The request body is parse-able however with invalid content.", 422);
        }

        else if ($response->code == 429) {
            throw new APIException("Too Many Requests. Rate limited.", 429);
        }

        else if ($response->code == 500) {
            throw new APIException("Internal Server Error.", 500);
        }

        else if ($response->code != 200) { //200 = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
    /**
     * The User Profile endpoint returns information about the Uber user that has authorized with the application.
     * @return UserProfileModel response from the API call*/
    public function getUserProfile () 
    {
        //prepare query string for API call
        $queryBuilder = Configuration::BASEURI."/v1/me";

        //validate and preprocess url
        $queryUrl = APIHelper::cleanUrl($queryBuilder);

        //prepare headers
        $headers = array (
            "accept" => "application/json",
            "Authorization", sprintf("Bearer %1$s", Configuration::$oAuthAccessToken)
        );

        //prepare API request
        $request = Unirest::get($queryUrl, $headers);

        //and invoke the API call request to fetch the response
        $response = $request->getResponse();

        //Error handling using HTTP status codes
        if ($response->code == 400) {
            throw new APIException("Malformed request.", 400);
        }

        else if ($response->code == 401) {
            throw new APIException("Unauthorized the request requires user authentication (not logged in).", 401);
        }

        else if ($response->code == 403) {
            throw new APIException("Forbidden. Also used for unauthorized requests such as improper OAuth 2.0 scopes or permissions issues.", 403);
        }

        else if ($response->code == 404) {
            throw new APIException("Not found.", 404);
        }

        else if ($response->code == 406) {
            throw new APIException("Unacceptable content type. Client sent an accepts header for a content type which does not exist on the server. Body includes a list of acceptable content types: “Unacceptable content type. Request resource as: application/json, etc.", 406);
        }

        else if ($response->code == 422) {
            throw new APIException("Invalid request. The request body is parse-able however with invalid content.", 422);
        }

        else if ($response->code == 429) {
            throw new APIException("Too Many Requests. Rate limited.", 429);
        }

        else if ($response->code == 500) {
            throw new APIException("Internal Server Error.", 500);
        }

        else if ($response->code != 200) { //200 = HTTP OK
            throw new APIException("HTTP Response Not OK", $response->code);
        }

        return $response->body;
    }
        
}
